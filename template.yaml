# WARNING, the ClouFront Distribution linkage to the webACL WAF firewall is done
# manually in this file as the WAF must be defined in the us-east-1 region and stack
# exports do not work across regions. This will need manually updating to the appropriate
# ARN when deploying this stack set for the first time...

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Mappings:
  prod:
    config:
      webAppDomainName: app-test.internal.robertcurran.uk

Resources:

  vpcCloudFrontTestProjectVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '192.168.0.0/16'
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPC

  vpcCloudFrontTestProjectVPCPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '192.168.1.0/24'
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref vpcCloudFrontTestProjectVPC
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPCPrivateSubnet

  vpcCloudFrontTestProjectVPCPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '192.168.0.0/24'
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref vpcCloudFrontTestProjectVPC
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPCPublicSubnet

  vpcCloudFrontTestProjectVPCPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpcCloudFrontTestProjectVPC
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPCPublicRouteTable

  vpcCloudFrontTestProjectVPCPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpcCloudFrontTestProjectVPC
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPCPrivateRouteTable

  vpcCloudFrontTestProjectVPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPCInternetGateway

  vpcCloudFrontTestProjectVPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref vpcCloudFrontTestProjectVPCInternetGateway
      VpcId: !Ref vpcCloudFrontTestProjectVPC

  vpcCloudFrontTestProjectVPCEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: 'vpc'
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPCEIP

  vpcCloudFrontTestProjectVPCNAT:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - vpcCloudFrontTestProjectVPCEIP
          - AllocationId
      SubnetId:
        Ref: vpcCloudFrontTestProjectVPCPublicSubnet
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPCNAT

  vpcCloudFrontTestProjectVPCPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref vpcCloudFrontTestProjectVPCNAT
      RouteTableId: !Ref vpcCloudFrontTestProjectVPCPrivateRouteTable

  vpcCloudFrontTestProjectVPCPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref vpcCloudFrontTestProjectVPCInternetGateway
      RouteTableId: !Ref vpcCloudFrontTestProjectVPCPublicRouteTable

  vpcCloudFrontTestProjectVPCPrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref vpcCloudFrontTestProjectVPCPrivateRouteTable
      SubnetId: !Ref vpcCloudFrontTestProjectVPCPrivateSubnet

  vpcCloudFrontTestProjectVPCPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref vpcCloudFrontTestProjectVPCPublicRouteTable
      SubnetId: !Ref vpcCloudFrontTestProjectVPCPublicSubnet

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: FullAccessWebAndSSH
      GroupDescription: Allow http/s and ssh
      VpcId:
        Ref: vpcCloudFrontTestProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  vpcRoute53HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: 'vpcCloudFront Test VPC Hosted Zone'
      Name: 'internal.robertcurran.uk'
      VPCs:
        - VPCId: !Ref vpcCloudFrontTestProjectVPC
          VPCRegion: !Ref "AWS::Region"

  # You cannot create an Alias to a CloudFront Distro in a private hosted zone
  # so this is just a direct CName record
  vpcStaticWebAssetsCloudFrontDomain:
    Type: AWS::Route53::RecordSet
    Properties:
      Comment: 'Internal Web App CDN CloudFront Domains'
      HostedZoneId: !Ref vpcRoute53HostedZone
      Name: !FindInMap [prod, config, webAppDomainName]
      ResourceRecords:
        - Fn::GetAtt:
            - vpcOnlyTestDistribution
            - DomainName
      TTL: '300'
      Type: 'CNAME'

  staticSiteSourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: vpc-only-test-site-source
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  staticSiteSourceBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref staticSiteSourceBucket
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: "staticSiteSourceBucket"
                  - "/*"
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity "
                    - Ref: staticSiteSourceBucketOriginAccessIdentity
                    - ""

  staticSiteSourceBucketOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'staticSiteSourceBucket Origin Access Identity For CloudFront Distribution'

  vpcOnlyTestDistribution:
     Type: AWS::CloudFront::Distribution
     Properties:
       DistributionConfig:
         Aliases:
           - !FindInMap [prod, config, webAppDomainName]
         Origins:
           - DomainName: !GetAtt [staticSiteSourceBucket, RegionalDomainName]
             Id: 'staticSiteSourceBucketOrigin'
             S3OriginConfig:
               OriginAccessIdentity:
                "Fn::Join": [ "", ["origin-access-identity/cloudfront/",
                                  { "Ref": "staticSiteSourceBucketOriginAccessIdentity" }]]
         Enabled: true
         IPV6Enabled: true
         Comment: internal app test, vpc only access test
         DefaultRootObject: index.html
         Logging:
           IncludeCookies: 'false'
           Bucket: 'logs.static.robertcurran.s3.amazonaws.com'
           Prefix: 'vpc-cloudfront-test/CloudFront/'
         DefaultCacheBehavior:
           TargetOriginId: 'staticSiteSourceBucketOrigin'
           AllowedMethods:
             - GET
             - HEAD
             - OPTIONS
           ForwardedValues:
             QueryString: 'false'
           ViewerProtocolPolicy: 'redirect-to-https'
         # CloudFront price classes described at: http://aws.amazon.com/cloudfront/pricing/
         # At time of writing Price Class 100 is EU and North America
         PriceClass: PriceClass_100
         ViewerCertificate:
           AcmCertificateArn: 'arn:aws:acm:us-east-1:XXXXXXXXXXXX:certificate/YYYYYYYYYYYYYYYYYYYY'
           MinimumProtocolVersion: 'TLSv1.2_2018'
           SslSupportMethod: 'sni-only'
         # !!! The below webACLId manually linked to the WebACL in the WAF Stack !!!!
         WebACLId:
          'arn:aws:wafv2:us-east-1:000000000000000:global/webacl/vpcCloudFrontTestFireWall/AAAAAAAAAAAA🍔AAAAAAAAAAAAA'

  someExampleAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowHeaders: "'Authorization, content-type'"
        AllowOrigin: "'*'"
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false # removes auth requirement from 'options' pre-flight requests

  testFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: build/functionName.handler
      Runtime: nodejs10.x
      CodeUri: .
      Description: >-
        A test function
      MemorySize: 128
      Timeout: 60
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          NODE_ENV: dev
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId: "someExampleAPI"
            Path: /
            Method: get
