AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:

  vpcCloudFrontTestProjectVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '192.168.0.0/16'
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPC

  vpcCloudFrontTestProjectVPCPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '192.168.1.0/24'
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref vpcCloudFrontTestProjectVPC
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPCPrivateSubnet

  vpcCloudFrontTestProjectVPCPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '192.168.0.0/24'
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref vpcCloudFrontTestProjectVPC
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPCPublicSubnet

  vpcCloudFrontTestProjectVPCPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpcCloudFrontTestProjectVPC
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPCPublicRouteTable

  vpcCloudFrontTestProjectVPCPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpcCloudFrontTestProjectVPC
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPCPrivateRouteTable

  vpcCloudFrontTestProjectVPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPCInternetGateway

  vpcCloudFrontTestProjectVPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref vpcCloudFrontTestProjectVPCInternetGateway
      VpcId: !Ref vpcCloudFrontTestProjectVPC

  vpcCloudFrontTestProjectVPCEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: 'vpc'
      Tags:
        - Key: Name
          Value: vpcCloudFrontTestProjectVPCEIP

  staticSiteSourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: vpc-only-test-site-source
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  staticSiteSourceBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref staticSiteSourceBucket
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: "staticSiteSourceBucket"
                  - "/*"
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity "
                    - Ref: staticSiteSourceBucketOriginAccessIdentity
                    - ""

  staticSiteSourceBucketOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'staticSiteSourceBucket Origin Access Identity For CloudFront Distribution'

  vpcOnlyTestDistribution:
     Type: AWS::CloudFront::Distribution
     Properties:
       DistributionConfig:
         Aliases:
           - internal-app-test.robertcurran.uk
         Origins:
           - DomainName: !GetAtt [staticSiteSourceBucket, RegionalDomainName]
             Id: 'staticSiteSourceBucketOrigin'
             S3OriginConfig:
               OriginAccessIdentity:
                "Fn::Join": [ "", ["origin-access-identity/cloudfront/",
                                  { "Ref": "staticSiteSourceBucketOriginAccessIdentity" }]]
         Enabled: true
         IPV6Enabled: true
         Comment: internal app test, vpc only access test
         DefaultRootObject: index.html
         Logging:
           IncludeCookies: 'false'
           Bucket: 'logs.static.robertcurran.s3.amazonaws.com'
           Prefix: 'vpc-cloudfront-test/CloudFront/'
         DefaultCacheBehavior:
           TargetOriginId: 'staticSiteSourceBucketOrigin'
           AllowedMethods:
             - GET
             - HEAD
             - OPTIONS
           ForwardedValues:
             QueryString: 'false'
           ViewerProtocolPolicy: 'redirect-to-https'
         # CloudFront price classes described at: http://aws.amazon.com/cloudfront/pricing/
         # At time of writing Price Class 100 is EU and North America
         PriceClass: PriceClass_100
         ViewerCertificate:
           AcmCertificateArn: 'arn:aws:acm:us-east-1:XXXXXXXXXXXX:certificate/YYYYYYYYYYYYYYYYYYYY'
           MinimumProtocolVersion: 'TLSv1.2_2018'
           SslSupportMethod: 'sni-only'

  someExampleAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors:
        AllowHeaders: "'Authorization, content-type'"
        AllowOrigin: "'*'"
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false # removes auth requirement from 'options' pre-flight requests

  testFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: build/functionName.handler
      Runtime: nodejs10.x
      CodeUri: .
      Description: >-
        A test function
      MemorySize: 128
      Timeout: 60
      ReservedConcurrentExecutions: 10
      Environment:
        Variables:
          NODE_ENV: dev
      Events:
        Api1:
          Type: Api
          Properties:
            RestApiId: "someExampleAPI"
            Path: /
            Method: get
